Day1 28-04-2025 Monday
How to organise files and folders in our laptop:

Git Commands:

$ git clone https://github.com/neelmyna/gofs_nie
$ git status

$ git add ./programs

$ git commit -m "MESSAGE"

$ git push origin main

$ git config --global user.name "USERNAME"
$ git config --global user.email "GIT EMAIL"

Steps to create Git Account
Steps to create new Repo

software folder and App downloads and installations
Adding path to env variables
learning folder and other folders

Day1 Assignments:
keyboard shortcuts for notepad++
keyboard shortcuts for vs code

----------------------------------------------------------------------------
Day2 29-04-2025 Tuesday

Steps to create Personal Access Token (PAT)
Click on Profile picture (Top right corner)
Sroll down and click settings
In next page, (scroll down) on left side, click developer settings
In next page on top left, Click personal access tokens and select classic token
In next page, again click generate new token and select classic
May prompt for authentication
In next page Give a note
Click expiry and select no expiry
Now select the check box Repo
scroll down fully and click generate token
Copy the token
Mail it to yourself (keep it with you safely)

$ git clone https://PAT@github.com/neelmyna/python_may25
-----------------------------------------------------
Arithmetic Operators:
+ - * / // % **

All are binary operators
I/P are numbers (values, operanads)
All these operators must be used with Infix notation
O/P is also a number
The expression with Arithmetic operators are solved left to right except for **
Thus all operators (except **) have left to right assositivity
+ and - have lesser precedence than other operators
** has highest priority.
Thus * / // % have higher priority (precedence or heirarchy) than + and - and lesser precedence than **
The Arithmetic operation happens only on same type of values. Because the way float numbers are stored is different than the integer numbers are stored in memory.
However if we convert float to int then there may be loss of data (decimal part). Hence always int is converted to float to complete the operation.

5 *  7 -  3  = 32
5 + 13 *  3  = 44
13 -  29 % 5 =  9
13 -  29 / 5 = 7.2
13 - 29 // 5 =  8
4 ** 2 = 16
3 * 2 ** 3 = 24
2 ** 3 ** 2 = 512
5.5 + 5 = 10.5


11 + 28

1101 + 11100

011100
001011
100111  39

10       2
100      4
1000     8
10000   16
100000  32

5.75 + 9

----------------------------------------------------------
RELATIONAL OPERATORS:
> < >= <= != ==

All are binary operators
Must be used with infix notation
I/P are numbers
O/P is boolean value
All have left to right associtivity
Relational operators have lesser precedence than Arithmetic operators but higher priority than logical operators
-------------------------------------------------------------
string class in python

A string is one data which is made up of one or more characters.
All the characters of the string together is a data.
Individual letters or characters of the string has no meaning.
On a string we may perform operations such as:
convert to upper/lower
find its length
find a character or sub-string in it
replace part of a string with another.
take only cerain part of the string

endswith, startswith, index, upper, lower, capitalize, isalpha, title, swapcase, substring, 

count = count + 1
count += 1
----------------------------------------------
DAY4 01-05-2025 THURSDAY

farmer problem
80 acre total
5 segments

16 T
16 P
16 C
16 S
16 SF

T Rs.7/kg
30%	10T/Ac and 70% 12T/Ac

P Rs.20/kg
10T/Ac

C Rs.24/kg
14T/Ac

SF Rs.200/Kg
0.7T/Ac

S Rs.4000/T
45T/Ac

tamoto_sales = (16 * 0.3 * 10 * 1000 * 7) + (16 * 0.7 * 12 * 1000 * 7)
potato_sales = 16 * 10 * 1000 * 20
cabbage_sales = 16 * 14 * 1000 * 24
sunflower_sales = 16 * 0.7 * 1000 * 200
sugarcane_sales = 16 * 45 * 4000

total_sales = tamoto_sales + potato_sales + cabbage_sales + sunflower_sales + sugarcane_sales

print(f'Total sale amount is {total_sales}')
chemical_free_sales = total_sales - sugarcane_sales
print(f'Total sale amount of chemical free farming after 11 months is {chemical_free_sales}')
---------------------------------------------------
STRING SLICING:

name = 'samsung south-korea'
print(name)

print(len(name))
print(max(name))
print(min(name))
print(sorted(name))
sorted_name = ''.join(sorted(name))
print(sorted_name)
--------------------------
name = 'samsung south-korea'
print(name)

print(name[0:10])
print(name[0:])
print(name[:10])
print(name[:])
print(name[::])
----------------------------
south-korea'

print(name[0:30])
print(name[2:12])
print(name[1:-2])
print(name[2:-1])
print(name[::2])
print(name[10:1:-1])
print(name[::-1])
print(name[-1::-1])
print(name[:-25:-1])
print(name[10:5:2])
print(name[2])
print(name[-2])
print(name[21])
print(name[-19])
-------------------
range function:
It is used to generate numbers in the given order.

range(10)
Here, the range starts from 0 and ends with 9. And the default increment is 1.
Thus it generates 0, 1, 2, 3, .... 9
range(2, 20)
It generates numbers from 2 to 19 with increment 1
range(5, 20, 2)
Generates numbers from 5 to 19 with increment 2
range(50, 10, -2)
Generates numbers from 50 to 11 with decrement 2 (increment -2)

range(10, 11)
Generates only 10
range(5, 5)
generates nothing
------------------------------------
switch-case in python


